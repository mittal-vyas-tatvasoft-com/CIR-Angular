{
    "pipes": [],
    "interfaces": [
        {
            "name": "Column",
            "id": "interface-Column-8d8b5762fd43d6d561a2ea7ffe97bf15a71d5e5342a9cba1dd9385e8c90ef417b9aa8cab76ee61b0e2ae696534f000f731296503b6c2429eac6b8e9653475483",
            "file": "src/app/shared/modules/tables/interfaces/table-data.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SelectOption } from '../../form-control/interface/select-option.interface';\r\n\r\nexport interface TableDataModel<T> {\r\n  tableData: Array<T>;\r\n  tableColumn: Column[];\r\n}\r\n\r\nexport interface Column {\r\n  columnDef: string;\r\n  header: string;\r\n  isSortable: boolean;\r\n  type: string;\r\n  isFilter?: boolean;\r\n  options?: SelectOption[];\r\n  actions?: string[];\r\n  searchValue?: string;\r\n}\r\n\r\nexport interface FilterColumns {\r\n  colName: string;\r\n  isFilter: boolean | undefined;\r\n  options: SelectOption[] | undefined;\r\n  value?: boolean | string;\r\n}\r\n\r\nexport interface SelectionEvent<T> {\r\n  data: any;\r\n  element: T;\r\n  columnDef: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "actions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "columnDef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "isFilter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "isSortable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectOption[]",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "searchValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FilterColumns",
            "id": "interface-FilterColumns-8d8b5762fd43d6d561a2ea7ffe97bf15a71d5e5342a9cba1dd9385e8c90ef417b9aa8cab76ee61b0e2ae696534f000f731296503b6c2429eac6b8e9653475483",
            "file": "src/app/shared/modules/tables/interfaces/table-data.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SelectOption } from '../../form-control/interface/select-option.interface';\r\n\r\nexport interface TableDataModel<T> {\r\n  tableData: Array<T>;\r\n  tableColumn: Column[];\r\n}\r\n\r\nexport interface Column {\r\n  columnDef: string;\r\n  header: string;\r\n  isSortable: boolean;\r\n  type: string;\r\n  isFilter?: boolean;\r\n  options?: SelectOption[];\r\n  actions?: string[];\r\n  searchValue?: string;\r\n}\r\n\r\nexport interface FilterColumns {\r\n  colName: string;\r\n  isFilter: boolean | undefined;\r\n  options: SelectOption[] | undefined;\r\n  value?: boolean | string;\r\n}\r\n\r\nexport interface SelectionEvent<T> {\r\n  data: any;\r\n  element: T;\r\n  columnDef: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "colName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "isFilter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | undefined",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectOption[] | undefined",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | string",
                    "optional": true,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "FormControlModel",
            "id": "interface-FormControlModel-6015a44ae62949fa4bd3ec9b836bf48365688785828a159e0ef0bfa0eb027fbc72c4cc60096363664e03309b625a4e6b4fbdb7324f619a2b1bbf8464f08442f0",
            "file": "src/app/shared/modules/form-control/interface/form-control.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface FormControlModel {\r\n  value: string | boolean;\r\n  key: string;\r\n  label: string;\r\n  requiredErrMsg?: string;\r\n  patternErrMsg?: string;\r\n  maxLengthError?: string;\r\n  inputType: string;\r\n  displayIcon?: boolean;\r\n  iconName?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "displayIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "iconName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "inputType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "maxLengthError",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "patternErrMsg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "requiredErrMsg",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | boolean",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "RadioOption",
            "id": "interface-RadioOption-5b6e6efd0054c33089c408941ded06919bc1fbd6af0936d1c11a63a42fd926236f8fdafebc4a794cc884386bb7a5a2c39ae4f01b8dc4c49a5e69a0cf1d1daafc",
            "file": "src/app/shared/modules/form-control/interface/radio-option.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface RadioOption {\r\n  key: string | boolean;\r\n  value: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | boolean",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SelectionEvent",
            "id": "interface-SelectionEvent-8d8b5762fd43d6d561a2ea7ffe97bf15a71d5e5342a9cba1dd9385e8c90ef417b9aa8cab76ee61b0e2ae696534f000f731296503b6c2429eac6b8e9653475483",
            "file": "src/app/shared/modules/tables/interfaces/table-data.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SelectOption } from '../../form-control/interface/select-option.interface';\r\n\r\nexport interface TableDataModel<T> {\r\n  tableData: Array<T>;\r\n  tableColumn: Column[];\r\n}\r\n\r\nexport interface Column {\r\n  columnDef: string;\r\n  header: string;\r\n  isSortable: boolean;\r\n  type: string;\r\n  isFilter?: boolean;\r\n  options?: SelectOption[];\r\n  actions?: string[];\r\n  searchValue?: string;\r\n}\r\n\r\nexport interface FilterColumns {\r\n  colName: string;\r\n  isFilter: boolean | undefined;\r\n  options: SelectOption[] | undefined;\r\n  value?: boolean | string;\r\n}\r\n\r\nexport interface SelectionEvent<T> {\r\n  data: any;\r\n  element: T;\r\n  columnDef: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "columnDef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "element",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "SelectOption",
            "id": "interface-SelectOption-54c11a7c5d102ee80e0c31535bb2ad21281a03c1ab0c1445e838e6f5c1e3ffa239147cc9d1722e88e44ed0e0063159afa7cd51be7c700e136b1a1bff5c4ca328",
            "file": "src/app/shared/modules/form-control/interface/select-option.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SelectOption {\r\n  id: number | string;\r\n  key: string | boolean;\r\n  value: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | boolean",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TableDataModel",
            "id": "interface-TableDataModel-8d8b5762fd43d6d561a2ea7ffe97bf15a71d5e5342a9cba1dd9385e8c90ef417b9aa8cab76ee61b0e2ae696534f000f731296503b6c2429eac6b8e9653475483",
            "file": "src/app/shared/modules/tables/interfaces/table-data.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { SelectOption } from '../../form-control/interface/select-option.interface';\r\n\r\nexport interface TableDataModel<T> {\r\n  tableData: Array<T>;\r\n  tableColumn: Column[];\r\n}\r\n\r\nexport interface Column {\r\n  columnDef: string;\r\n  header: string;\r\n  isSortable: boolean;\r\n  type: string;\r\n  isFilter?: boolean;\r\n  options?: SelectOption[];\r\n  actions?: string[];\r\n  searchValue?: string;\r\n}\r\n\r\nexport interface FilterColumns {\r\n  colName: string;\r\n  isFilter: boolean | undefined;\r\n  options: SelectOption[] | undefined;\r\n  value?: boolean | string;\r\n}\r\n\r\nexport interface SelectionEvent<T> {\r\n  data: any;\r\n  element: T;\r\n  columnDef: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "tableColumn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Column[]",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "tableData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<T>",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "TimePickerModel",
            "id": "interface-TimePickerModel-59d8480aed5db3edbd5c253dcd11e2446525fc3893ebf94a3a899ae1be817c7b4b6237783b87fbb326efa0c77e785e09f3ed5d63ecdd5384eea783b402c88b41",
            "file": "src/app/shared/modules/form-control/interface/time-picker.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface TimePickerModel {\r\n  value: string | boolean;\r\n  key: string;\r\n  label: string;\r\n  inputType: string;\r\n  required: boolean;\r\n  setNowButton: boolean;\r\n  format: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "format",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "inputType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "setNowButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | boolean",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "ValueLabel",
            "id": "interface-ValueLabel-b213691a19f313b08d8d6aea99c719e71c5b6c36dc3d7f334f4741b0835419e001a4e804e3d9e607707fa7ca767c155c4483e3b751829503a6403a01f6db7991",
            "file": "src/app/shared/common/interfaces/label-value.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ValueLabel {\r\n  label: string;\r\n  value: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "LoginService",
            "id": "injectable-LoginService-43f893e1b86a025bf2190f421bc7d7c4e7ec4155f3b8f78ffd6eeba024cb5c9c342310adba83c7277ce9ad5241b8b8b24c6e3b59ae6aa077ce76d4e17988d1da",
            "file": "src/app/core/auth/services/login.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LoginService {}\r\n",
            "type": "injectable"
        },
        {
            "name": "ValidatorService",
            "id": "injectable-ValidatorService-1bd57b430bfa7a4035577bf513ea0082b1f7078fb736e170f1a9003b2612f96e6115a9c568168df5cc1c34b34cc5d44a93b4e153afa951c67dae0fbdb860b014",
            "file": "src/app/shared/modules/form-control/service/validator.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getError",
                    "args": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "formControlModel",
                            "type": "FormControlModel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "form",
                            "type": "FormGroup",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "field",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "formControlModel",
                            "type": "FormControlModel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { FormControlModel } from '../interface/form-control.interface';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ValidatorService {\r\n  getError(form: FormGroup, field: string, formControlModel: FormControlModel) {\r\n    const formControl = form.get(field);\r\n    if (formControl) {\r\n      if (formControl.touched && formControl.errors) {\r\n        if (formControl.errors['required']) {\r\n          return formControlModel.requiredErrMsg;\r\n        }\r\n        if (formControl.errors['pattern']) {\r\n          return formControlModel.patternErrMsg;\r\n        }\r\n        if (formControl.errors['maxlength']) {\r\n          return formControlModel.maxLengthError;\r\n        }\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n}\r\n",
            "type": "injectable"
        }
    ],
    "guards": [
        {
            "name": "AuthGuard",
            "id": "injectable-AuthGuard-0c910a0439fb7c8003b848ac113f1355428fe3aee03cb7b625c6d74c657005f0697fd5c3c234bb0e4bd1ec4c5a986f081c89ac11be29181d1d8ace44b1344efc",
            "file": "src/app/core/guards/auth/auth.guard.ts",
            "properties": [],
            "methods": [
                {
                    "name": "canActivate",
                    "args": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable | Promise | boolean | UrlTree",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "route",
                            "type": "ActivatedRouteSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "state",
                            "type": "RouterStateSnapshot",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {\r\n  ActivatedRouteSnapshot,\r\n  CanActivate,\r\n  RouterStateSnapshot,\r\n  UrlTree,\r\n} from '@angular/router';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthGuard implements CanActivate {\r\n  canActivate(\r\n    route: ActivatedRouteSnapshot,\r\n    state: RouterStateSnapshot,\r\n  ):\r\n    | Observable<boolean | UrlTree>\r\n    | Promise<boolean | UrlTree>\r\n    | boolean\r\n    | UrlTree {\r\n      console.log(route, state);\r\n    return true;\r\n  }\r\n}\r\n",
            "type": "guard"
        }
    ],
    "interceptors": [
        {
            "name": "AuthTokenInterceptor",
            "id": "injectable-AuthTokenInterceptor-56a99f2212508770d2702661bbf8590a1c11808e68b3201dfff29b7746c64c8bee45784f67f0675abff9a848465d458307a002a01a2695135e132dcab2664727",
            "file": "src/app/core/interceptors/auth/auth-token.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<>>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class AuthTokenInterceptor implements HttpInterceptor {\r\n  intercept(\r\n    request: HttpRequest<unknown>,\r\n    next: HttpHandler,\r\n  ): Observable<HttpEvent<unknown>> {\r\n    return next.handle(request);\r\n  }\r\n}\r\n",
            "type": "interceptor"
        },
        {
            "name": "ErrorHandlerInterceptor",
            "id": "injectable-ErrorHandlerInterceptor-f3a30c97d407e4fb27bf916deea14da9f717cbdeb0adb3f880120b125931435b5e80249a15798228caabec8a7743ee9c56ec3439e0acc0492c2689054bc08b04",
            "file": "src/app/core/interceptors/error-handler/error-handler.interceptor.ts",
            "properties": [],
            "methods": [
                {
                    "name": "intercept",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpEvent<>>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest<>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandler",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport {\r\n  HttpRequest,\r\n  HttpHandler,\r\n  HttpEvent,\r\n  HttpInterceptor,\r\n} from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class ErrorHandlerInterceptor implements HttpInterceptor {\r\n  intercept(\r\n    request: HttpRequest<unknown>,\r\n    next: HttpHandler,\r\n  ): Observable<HttpEvent<unknown>> {\r\n    return next.handle(request);\r\n  }\r\n}\r\n",
            "type": "interceptor"
        }
    ],
    "classes": [],
    "directives": [
        {
            "name": "NumbersOnlyDirective",
            "id": "directive-NumbersOnlyDirective-340eca5f654688e536c65d502a4ad6ab1d029f589d77abb98258ff845201421e3ea71849d4fbbfe9f1ad2c9f3893f69a0487b08868218518e9a4550e65a54d3a",
            "file": "src/app/shared/modules/form-control/directives/numbers-only.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, ElementRef, HostListener } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[numbersOnly]',\r\n})\r\nexport class NumbersOnlyDirective {\r\n  private navigationKeys = [\r\n    'Backspace',\r\n    'Delete',\r\n    'Tab',\r\n    'Escape',\r\n    'Enter',\r\n    'Home',\r\n    'End',\r\n    'ArrowLeft',\r\n    'ArrowRight',\r\n    'Clear',\r\n    'Copy',\r\n    'Paste',\r\n  ];\r\n  inputElement: HTMLInputElement;\r\n  constructor(public el: ElementRef) {\r\n    this.inputElement = el.nativeElement;\r\n  }\r\n\r\n  @HostListener('keydown', ['$event'])\r\n  onKeyDown(e: KeyboardEvent) {\r\n    if (\r\n      this.navigationKeys.indexOf(e.key) > -1 || // Allow: navigation keys: backspace, delete, arrows etc.\r\n      (e.key === 'a' && e.ctrlKey === true) || // Allow: Ctrl+A\r\n      (e.key === 'c' && e.ctrlKey === true) || // Allow: Ctrl+C\r\n      (e.key === 'v' && e.ctrlKey === true) || // Allow: Ctrl+V\r\n      (e.key === 'x' && e.ctrlKey === true) || // Allow: Ctrl+X\r\n      (e.key === 'a' && e.metaKey === true) || // Allow: Cmd+A (Mac)\r\n      (e.key === 'c' && e.metaKey === true) || // Allow: Cmd+C (Mac)\r\n      (e.key === 'v' && e.metaKey === true) || // Allow: Cmd+V (Mac)\r\n      (e.key === 'x' && e.metaKey === true) // Allow: Cmd+X (Mac)\r\n    ) {\r\n      // let it happen, don't do anything\r\n      return;\r\n    }\r\n    // Ensure that it is a number and stop the keypress\r\n    if (\r\n      (e.shiftKey || e.keyCode < 48 || e.keyCode > 57) &&\r\n      (e.keyCode < 96 || e.keyCode > 105)\r\n    ) {\r\n      e.preventDefault();\r\n    }\r\n  }\r\n\r\n  @HostListener('paste', ['$event'])\r\n  onPaste(event: ClipboardEvent) {\r\n    event.preventDefault();\r\n    if (event.clipboardData) {\r\n      const pastedInput: string = event.clipboardData\r\n        .getData('text/plain')\r\n        .replace(/[^0-9\\s!?]/g, ''); // outputs only numbers and spaces\r\n      this.inputElement.value = pastedInput;\r\n    }\r\n  }\r\n\r\n  @HostListener('drop', ['$event'])\r\n  onDrop(event: DragEvent) {\r\n    event.preventDefault();\r\n    if (event.dataTransfer) {\r\n      const textData = event.dataTransfer\r\n        .getData('text')\r\n        .replace(/[^0-9\\s!?]/g, ''); // outputs only numbers and spaces\r\n      this.inputElement.focus();\r\n      this.inputElement.value = textData;\r\n    }\r\n  }\r\n}\r\n",
            "selector": "[numbersOnly]",
            "providers": [],
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "drop",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63
                },
                {
                    "name": "keydown",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27
                },
                {
                    "name": "paste",
                    "args": [
                        {
                            "name": "event",
                            "type": "ClipboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52
                }
            ],
            "propertiesClass": [
                {
                    "name": "el",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "inputElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HTMLInputElement",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "navigationKeys",
                    "defaultValue": "[\r\n    'Backspace',\r\n    'Delete',\r\n    'Tab',\r\n    'Escape',\r\n    'Enter',\r\n    'Home',\r\n    'End',\r\n    'ArrowLeft',\r\n    'ArrowRight',\r\n    'Clear',\r\n    'Copy',\r\n    'Paste',\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 7,
                    "modifierKind": [
                        121
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onDrop",
                    "args": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'drop', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "DragEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onKeyDown",
                    "args": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'keydown', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "e",
                            "type": "KeyboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onPaste",
                    "args": [
                        {
                            "name": "event",
                            "type": "ClipboardEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'paste', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "ClipboardEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-817aa1931b0f95c729195c48ba2cdc1babe2fbccac7f5d05c51a7f776fab58dc206bf730c4a1e77f000cc4a90e9dce756ec404a68d59f6ad39aa0dd317ff9596",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'CIR'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  title = 'CIR';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<router-outlet></router-outlet>"
        },
        {
            "name": "AppControlsComponent",
            "id": "component-AppControlsComponent-68920111541ab9c6bac23bd0f485eed0792a87ddc9c0b08ba56c18415908e8eb9d04aa227a2751bbe6e144519886caa0eebf7cccbe77d12bb06f672b57506b0d",
            "file": "src/app/app-controls/component/app-controls.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-app-controls",
            "styleUrls": [
                "./app-controls.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app-controls.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "appControls",
                    "defaultValue": "appControls",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "multiChipSelect",
                    "defaultValue": "multiChipSelect",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValueLabel[]",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "radioOptions",
                    "defaultValue": "radioOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "RadioOption[]",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "selectOptions",
                    "defaultValue": "selectOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SelectOption[]",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "methodsClass": [
                {
                    "name": "createForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getSelectionControl",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControl",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onIconClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onTimeChange",
                    "args": [
                        {
                            "name": "changedTime",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changedTime",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "submit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport {\r\n  FormBuilder,\r\n  FormControl,\r\n  FormGroup,\r\n  Validators,\r\n} from '@angular/forms';\r\nimport { ValueLabel } from 'src/app/shared/common/interfaces/label-value.interface';\r\nimport { RadioOption } from 'src/app/shared/modules/form-control/interface/radio-option.interface';\r\nimport { SelectOption } from 'src/app/shared/modules/form-control/interface/select-option.interface';\r\nimport {\r\n  appControls,\r\n  multiChipSelect,\r\n  radioOptions,\r\n  selectOptions,\r\n} from '../configs/app-controls.config';\r\n\r\n@Component({\r\n  selector: 'app-app-controls',\r\n  templateUrl: './app-controls.component.html',\r\n  styleUrls: ['./app-controls.component.scss'],\r\n})\r\nexport class AppControlsComponent implements OnInit {\r\n  appControls = appControls;\r\n  form: FormGroup;\r\n  selectOptions: SelectOption[] = selectOptions;\r\n  multiChipSelect: ValueLabel[] = multiChipSelect;\r\n  radioOptions: RadioOption[] = radioOptions;\r\n\r\n  constructor(private fb: FormBuilder) {}\r\n\r\n  ngOnInit(): void {\r\n    this.createForm();\r\n  }\r\n\r\n  createForm() {\r\n    this.form = this.fb.group({\r\n      textField: ['Testing text', [Validators.required]],\r\n      numberField: ['123123', [Validators.required]],\r\n      toggleField: [true],\r\n      selectField: [[], [Validators.required]],\r\n      multiChipSelectField: [[], [Validators.required]],\r\n      radioField: [[], [Validators.required]],\r\n      checkboxField: ['', [Validators.required]],\r\n      fileUploadField: [''],\r\n      timePickerField: [''],\r\n      datePickerField: [''],\r\n    });\r\n  }\r\n\r\n  getSelectionControl(key: string): FormControl {\r\n    return this.form.get(key) as FormControl;\r\n  }\r\n\r\n  onTimeChange(changedTime: string) {}\r\n\r\n  submit() {\r\n    if (this.form.invalid) this.form.markAllAsTouched();\r\n  }\r\n\r\n  onIconClick(event: any){\r\n     if(event.formControlModel.inputType == 'text'){\r\n      event.formControlModel.inputType = 'password';\r\n     }else{\r\n      event.formControlModel.inputType = 'text';\r\n     }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".box{\r\n    padding: 30px;\r\n}",
                    "styleUrl": "./app-controls.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-card class=\"mat-elevation-z0 box\">\r\n  <mat-card-header>\r\n    <mat-card-title class=\"pb-5\">All Controls</mat-card-title>\r\n  </mat-card-header>\r\n  <mat-card-content>\r\n    <app-text-control\r\n      [formControlModel]=\"appControls.textField\"\r\n      [form]=\"form\"\r\n      (iconClick)=\"onIconClick(input)\"\r\n      #input\r\n    ></app-text-control\r\n  ></mat-card-content>\r\n  <mat-card-content>\r\n    <app-text-control-number\r\n      [formControlModel]=\"appControls.numberField\"\r\n      [form]=\"form\"\r\n    >\r\n    </app-text-control-number>\r\n  </mat-card-content>\r\n  <mat-card-content>\r\n    <app-select\r\n      [formControlModel]=\"appControls.selectField\"\r\n      [form]=\"form\"\r\n      [options]=\"selectOptions\"\r\n    ></app-select>\r\n  </mat-card-content>\r\n  <mat-card-content>\r\n    <app-multi-chip-select\r\n      [formControlModel]=\"appControls.multiChipSelectField\"\r\n      [formControl]=\"getSelectionControl('multiChipSelectField')\"\r\n      [form]=\"form\"\r\n      [allItems]=\"multiChipSelect\"\r\n      ngDefaultControl\r\n    ></app-multi-chip-select>\r\n  </mat-card-content>\r\n\r\n  <mat-card-content>\r\n    <app-time-picker\r\n      (timeChanged)=\"onTimeChange($event)\"\r\n      [timePickerModel]=\"appControls.timePickerField\"\r\n      [form]=\"form\"\r\n    ></app-time-picker>\r\n  </mat-card-content>\r\n  <mat-card-content>\r\n    <app-toggle\r\n      [form]=\"form\"\r\n      [formControlModel]=\"appControls.toggleField\"\r\n    ></app-toggle>\r\n  </mat-card-content>\r\n  <mat-card-content>\r\n    <app-radio\r\n      [formControlModel]=\"appControls.radioField\"\r\n      [form]=\"form\"\r\n      [options]=\"radioOptions\"\r\n    ></app-radio>\r\n  </mat-card-content>\r\n  <mat-card-content>\r\n    <app-checkbox\r\n      [formControlModel]=\"appControls.checkboxField\"\r\n      [form]=\"form\"\r\n    ></app-checkbox>\r\n  </mat-card-content>\r\n  <mat-card-content>\r\n    <app-file-upload\r\n      [formControlModel]=\"appControls.fileUploadField\"\r\n      [form]=\"form\"\r\n    >\r\n    </app-file-upload>\r\n  </mat-card-content>\r\n  <mat-card-content>\r\n    <app-date-picker\r\n    [form]=\"form\"\r\n    [formControlModel]=\"appControls.datePickerField\"\r\n  ></app-date-picker>\r\n  </mat-card-content>\r\n  <mat-card-content>\r\n    <app-button\r\n      type=\"button\"\r\n      label=\"Button Control\"\r\n      (btnClick)=\"submit()\"\r\n    ></app-button>\r\n  </mat-card-content>\r\n  <mat-card-content>\r\n    <app-stroked-button      \r\n      label=\"Stroked Button Control\"\r\n      (onBtnClick)=\"submit()\"\r\n    ></app-stroked-button>\r\n  </mat-card-content>\r\n</mat-card>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-4d815eca1a3fb26383261fbfe6afb0ef0c9435c109842dbca50181d780d97b3da861ce9f5b058854de075925d73f2fe232364b660c3f408b4cd9e35ce38fc4d2",
            "file": "src/app/shared/modules/form-control/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "ThemePalette",
                    "decorators": []
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "btnClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { ThemePalette } from '@angular/material/core';\r\n\r\n@Component({\r\n  selector: 'app-button',\r\n  templateUrl: './button.component.html',\r\n  styleUrls: ['./button.component.scss'],\r\n})\r\nexport class ButtonComponent {\r\n  @Input() color: ThemePalette = 'primary';\r\n  @Input() type = 'button';\r\n  @Input() isDisabled = false;\r\n  @Input() label: string;\r\n  @Output() btnClick = new EventEmitter<Event>();\r\n\r\n  onClick(event: Event) {\r\n    this.btnClick.emit(event);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<button\r\n  mat-raised-button\r\n  [disabled]=\"isDisabled\"\r\n  [color]=\"color\"\r\n  [type]=\"type\"\r\n  (click)=\"onClick($any($event))\"\r\n>\r\n  {{ label }}\r\n</button>\r\n"
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-822d67aacbffc50a1990a84db54e1c2bd62e29556ac645fb24b42d905661a25a2865a39c491396f833b7bf1365e28c6158945b8dbfab3d5f15c5f764b9a06fec",
            "file": "src/app/shared/modules/form-control/components/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-checkbox",
            "styleUrls": [
                "./checkbox.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "formControlModel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "FormControlModel",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_validator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorService",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, OnInit } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { FormControlModel } from '../../interface/form-control.interface';\r\nimport { ValidatorService } from '../../service/validator.service';\r\n\r\n@Component({\r\n  selector: 'app-checkbox',\r\n  templateUrl: './checkbox.component.html',\r\n  styleUrls: ['./checkbox.component.scss'],\r\n})\r\nexport class CheckboxComponent implements OnInit {\r\n  @Input() formControlModel: FormControlModel;\r\n  @Input() form: FormGroup;\r\n\r\n  constructor(public _validator: ValidatorService) {}\r\n  ngOnInit(): void {\r\n    console.log(this.formControlModel);\r\n    console.log(this.form);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_validator",
                        "type": "ValidatorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "_validator",
                        "type": "ValidatorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div [formGroup]=\"form\">\r\n  <section>\r\n    <mat-checkbox\r\n      class=\"chk-margin\"\r\n      color=\"primary\"\r\n      [formControlName]=\"formControlModel.key\"\r\n      [id]=\"formControlModel.key\"\r\n      >{{ formControlModel.label }}</mat-checkbox\r\n    >\r\n  </section>\r\n  <mat-error>\r\n    {{ _validator.getError(form, formControlModel.key, formControlModel) }}\r\n  </mat-error>\r\n</div>\r\n"
        },
        {
            "name": "CoreComponent",
            "id": "component-CoreComponent-a2574b4df8f93b9560417c7ce86234d6786f0e3abdef210e1bc3b15b19287b345189627d68cf12655d731d6a8125e8ef9c9e779a862b3bf902ac8709fc536688",
            "file": "src/app/core/core.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-core",
            "styleUrls": [],
            "styles": [],
            "template": "<app-sidebar></app-sidebar>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-core',\r\n  template: '<app-sidebar></app-sidebar>',\r\n})\r\nexport class CoreComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "DatePickerComponent",
            "id": "component-DatePickerComponent-4d964904275f376d774815d69c7e1befe1ba91d2b4865f429011acad0ddc8f79b042e377e19989d01cb6d2c2a955bc1f9146fd05ca0b37267e525de44fde1123",
            "file": "src/app/shared/modules/form-control/components/date-picker/date-picker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: DateAdapter, useClass: MomentDateAdapter, deps: [MAT_DATE_LOCALE],\n}"
                },
                {
                    "name": "{ provide: MAT_DATE_FORMATS, useValue: DATE_FORMATS }"
                }
            ],
            "selector": "app-date-picker",
            "styleUrls": [
                "./date-picker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./date-picker.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "formControlModel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "FormControlModel",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "inputChange",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { MomentDateAdapter } from '@angular/material-moment-adapter';\r\nimport {\r\n  DateAdapter,\r\n  MAT_DATE_FORMATS,\r\n  MAT_DATE_LOCALE,\r\n} from '@angular/material/core';\r\nimport { FormControlModel } from 'src/app/shared/modules/form-control/interface/form-control.interface';\r\n\r\nexport const DATE_FORMATS = {\r\n  parse: {\r\n    dateInput: 'DD-MM-YYYY',\r\n  },\r\n  display: {\r\n    dateInput: 'DD-MM-YYYY',\r\n    monthYearLabel: 'MMM YYYY',\r\n    dateA11yLabel: 'LL',\r\n    monthYearA11yLabel: 'MMMM YYYY',\r\n  },\r\n};\r\n\r\n@Component({\r\n  selector: 'app-date-picker',\r\n  templateUrl: './date-picker.component.html',\r\n  styleUrls: ['./date-picker.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: DateAdapter,\r\n      useClass: MomentDateAdapter,\r\n      deps: [MAT_DATE_LOCALE],\r\n    },\r\n\r\n    { provide: MAT_DATE_FORMATS, useValue: DATE_FORMATS },\r\n  ],\r\n})\r\nexport class DatePickerComponent {\r\n  @Input() formControlModel: FormControlModel;\r\n  @Input() form: FormGroup;\r\n  @Output() inputChange = new EventEmitter<string>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./date-picker.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<ng-container [formGroup]=\"form\">\r\n  <mat-form-field appearance=\"fill\">\r\n    <mat-label>Date</mat-label>\r\n    <input\r\n      matInput\r\n      [matDatepicker]=\"picker\"\r\n      [formControlName]=\"formControlModel.key\"\r\n      [id]=\"formControlModel.key\"\r\n      [type]=\"formControlModel.inputType\"\r\n    />\r\n    <mat-hint>DD/MM/YYYY</mat-hint>\r\n    <mat-datepicker-toggle matSuffix [for]=\"picker\"> </mat-datepicker-toggle>\r\n    <mat-datepicker #picker></mat-datepicker>\r\n  </mat-form-field>\r\n  <br />\r\n</ng-container>\r\n"
        },
        {
            "name": "FileUploadComponent",
            "id": "component-FileUploadComponent-191b9166d3f3d610037bb4bca09aa3b3ed15524882708349eda57ec5937be7940daf96ef1612260a4a341ca0f0edafdd4ec4b04c17ecac22b8245a1324ea4a8c",
            "file": "src/app/shared/modules/form-control/components/file-upload/file-upload.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-file-upload",
            "styleUrls": [
                "./file-upload.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./file-upload.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "formControlModel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "FormControlModel",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "imageFile",
                    "defaultValue": "new EventEmitter<File | null>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter<File | null>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_validator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorService",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { FormControlModel } from '../../interface/form-control.interface';\r\nimport { ValidatorService } from '../../service/validator.service';\r\n\r\n@Component({\r\n  selector: 'app-file-upload',\r\n  templateUrl: './file-upload.component.html',\r\n  styleUrls: ['./file-upload.component.scss'],\r\n})\r\nexport class FileUploadComponent {\r\n  @Input() formControlModel: FormControlModel;\r\n  @Input() form: FormGroup;\r\n  @Output()\r\n  imageFile: EventEmitter<File | null> = new EventEmitter<File | null>();\r\n\r\n  constructor(public _validator: ValidatorService) {}\r\n\r\n  getType() {\r\n    const formControlModel = this.formControlModel as FormControlModel;\r\n    if (formControlModel.inputType) {\r\n      return formControlModel.inputType;\r\n    }\r\n    return '';\r\n  }\r\n\r\n  onChange(event: Event) {\r\n    const target = event.target as HTMLInputElement;\r\n    //sending the file to dynamic-form component.\r\n    this.imageFile.emit(target.files ? target?.files[0] : null);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./file-upload.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_validator",
                        "type": "ValidatorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "_validator",
                        "type": "ValidatorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div [formGroup]=\"form\">\r\n  <div class=\"file-upload-wrapper\" data-text=\"Select your file\">\r\n    <input\r\n      [type]=\"getType()\"\r\n      [formControlName]=\"formControlModel.key\"\r\n      [id]=\"formControlModel.key\"\r\n      (change)=\"onChange($event)\"\r\n      [name]=\"formControlModel.key\"\r\n      multiple=\"multiple\"\r\n      accept=\".png, .jpg, .jpeg\"\r\n    />\r\n    <app-button type=\"submit\" [isDisabled]=\"!form.valid\" label=\"Upload\">\r\n    </app-button>\r\n  </div>\r\n  <mat-error>\r\n    {{ _validator.getError(form, formControlModel.key, formControlModel) }}\r\n  </mat-error>\r\n</div>\r\n"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-6c290628b84a1abe1bdfb878464bc2b706fefca858c51621202ab34ffddd486d19c7b04ea6e2c5d71d1bb1dffcb9099de70b3a4f92b6e5c31ebf472a97986eb5",
            "file": "src/app/core/components/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer",
            "styleUrls": [
                "./footer.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-footer',\r\n  templateUrl: './footer.component.html',\r\n  styleUrls: ['./footer.component.scss']\r\n})\r\nexport class FooterComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./footer.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>footer works!</p>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-66aab1b24c0d8854e1f82fba28138804b4b85580f247fc5033dd7baf800ad39c3ed2312637667e7b335e90cb144fdbd62673e2ce34182a65e43f7cecfaa900cc",
            "file": "src/app/core/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.scss']\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>header works!</p>\r\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-cfc4532689c5154409721306b149c41b19c569f6f94e91970bd0f89ab174dbd302d755b400b27ee0decb743507c3faa6f879c75657e7ce6c5af261cc60717799",
            "file": "src/app/core/auth/components/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n})\r\nexport class LoginComponent {\r\n  //TODO: add comment for every methods\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<p>login works</p>\r\n"
        },
        {
            "name": "MultiChipSelectComponent",
            "id": "component-MultiChipSelectComponent-90a06156f3f278d4f62dc908b832ceb9cd009e8fe2da589d2ae3aa2139f47a3a76320db80ee5a9c730e2527eed2c4f55cc0bf95ead747db5b98ac0e75989aaa1",
            "file": "src/app/shared/modules/form-control/components/multi-chip-select/multi-chip-select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-multi-chip-select",
            "styleUrls": [
                "./multi-chip-select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./multi-chip-select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "allItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "ValueLabel[]",
                    "decorators": []
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "FormControl",
                    "decorators": []
                },
                {
                    "name": "formControlModel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "FormControlModel",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "addOnBlur",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "fieldCtrl",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "filteredItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Observable<ValueLabel[]>",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "inputField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'input'"
                        }
                    ]
                },
                {
                    "name": "removable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "selectable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "separatorKeysCodes",
                    "defaultValue": "[ENTER, COMMA]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "methodsClass": [
                {
                    "name": "_filter",
                    "args": [
                        {
                            "name": "value",
                            "type": "ValueLabel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValueLabel[]",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ],
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "ValueLabel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatChipInputEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatChipInputEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getSelectedItems",
                    "args": [],
                    "optional": false,
                    "returnType": "ValueLabel[]",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isOptionDisabled",
                    "args": [
                        {
                            "name": "item",
                            "type": "ValueLabel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "ValueLabel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClickSelect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "remove",
                    "args": [
                        {
                            "name": "ele",
                            "type": "ValueLabel",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "ele",
                            "type": "ValueLabel",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "selected",
                    "args": [
                        {
                            "name": "event",
                            "type": "MatAutocompleteSelectedEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MatAutocompleteSelectedEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  OnInit,\r\n  OnChanges,\r\n  ViewChild,\r\n  SimpleChanges,\r\n} from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { map, Observable, startWith } from 'rxjs';\r\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\r\nimport { MatChipInputEvent } from '@angular/material/chips';\r\nimport { MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';\r\nimport { FormControlModel } from '../../interface/form-control.interface';\r\nimport { ValueLabel } from 'src/app/shared/common/interfaces/label-value.interface';\r\n\r\n@Component({\r\n  selector: 'app-multi-chip-select',\r\n  templateUrl: './multi-chip-select.component.html',\r\n  styleUrls: ['./multi-chip-select.component.scss'],\r\n})\r\nexport class MultiChipSelectComponent implements OnInit, OnChanges {\r\n  @Input() formControlModel: FormControlModel;\r\n  @Input() formControl: FormControl;\r\n  @Input() form: FormGroup;\r\n  @Input() allItems: ValueLabel[] = [];\r\n\r\n  selectable = true;\r\n  removable = true;\r\n  addOnBlur = false;\r\n  separatorKeysCodes: number[] = [ENTER, COMMA];\r\n  filteredItems: Observable<ValueLabel[]>;\r\n  fieldCtrl = new FormControl();\r\n\r\n  @ViewChild('input') inputField: ElementRef;\r\n\r\n  ngOnInit(): void {\r\n    this.filteredItems = this.fieldCtrl.valueChanges.pipe(\r\n      startWith(null),\r\n      map((text: ValueLabel | null) =>\r\n        text ? this._filter(text) : this.allItems.slice(),\r\n      ),\r\n    );\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    if (changes) {\r\n      this.filteredItems = this.fieldCtrl.valueChanges.pipe(\r\n        startWith(null),\r\n        map((text: ValueLabel | null) =>\r\n          text ? this._filter(text) : changes['allItems'].currentValue.slice(),\r\n        ),\r\n      );\r\n    }\r\n  }\r\n\r\n  getSelectedItems(): ValueLabel[] {\r\n    return this.formControl.value || [];\r\n  }\r\n\r\n  onClickSelect() {\r\n    this.formControl.markAsTouched();\r\n  }\r\n\r\n  add(event: MatChipInputEvent): void {\r\n    const selectedItems = this.getSelectedItems();\r\n    const input = event.input;\r\n    const value = event.value;\r\n    const selectedItem = this.allItems.find(\r\n      (item) => item.value === Number(value),\r\n    );\r\n\r\n    if ((value || '').trim() && selectedItem) {\r\n      selectedItems.push(selectedItem);\r\n    }\r\n\r\n    if (input) {\r\n      input.value = '';\r\n    }\r\n\r\n    this.formControl.setValue(selectedItems);\r\n    this.fieldCtrl.setValue(null);\r\n  }\r\n\r\n  remove(ele: ValueLabel): void {\r\n    const selectedItems = this.getSelectedItems();\r\n    const index = selectedItems.findIndex((item) => item.value === ele.value);\r\n\r\n    if (index >= 0) {\r\n      selectedItems.splice(index, 1);\r\n    }\r\n    this.formControl.setValue(selectedItems);\r\n  }\r\n\r\n  selected(event: MatAutocompleteSelectedEvent): void {\r\n    const selectedItem = this.allItems.find(\r\n      (item) => item.value === event.option.value.value,\r\n    );\r\n\r\n    if (selectedItem) {\r\n      this.formControl.setValue([...this.getSelectedItems(), selectedItem]);\r\n      this.fieldCtrl.setValue(null);\r\n      this.inputField.nativeElement.value = '';\r\n    }\r\n  }\r\n\r\n  private _filter(value: ValueLabel): ValueLabel[] {\r\n    const filterValue = value.label.toLowerCase();\r\n\r\n    return this.allItems.filter(\r\n      (item) => item.label.toLowerCase().indexOf(filterValue) === 0,\r\n    );\r\n  }\r\n\r\n  isOptionDisabled(item: ValueLabel) {\r\n    return this.getSelectedItems().some((i) => i.value === item.value);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "::ng-deep .mat-form-field-infix {\r\n  width: 250px !important;\r\n}\r\n",
                    "styleUrl": "./multi-chip-select.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<mat-form-field class=\"form-field\" [formGroup]=\"form\">\r\n  <mat-chip-list #chipList>\r\n    <mat-chip\r\n      *ngFor=\"let item of getSelectedItems()\"\r\n      [selectable]=\"selectable\"\r\n      [removable]=\"removable\"\r\n      (removed)=\"remove(item)\"\r\n    >\r\n      {{ item.label }}\r\n      <mat-icon matChipRemove *ngIf=\"removable\">cancel</mat-icon>\r\n    </mat-chip>\r\n    <input\r\n      [placeholder]=\"formControlModel.label\"\r\n      [name]=\"formControlModel.key\"\r\n      #input\r\n      (click)=\"onClickSelect()\"\r\n      [formControl]=\"fieldCtrl\"\r\n      [matAutocomplete]=\"auto\"\r\n      [matChipInputFor]=\"chipList\"\r\n      [matChipInputSeparatorKeyCodes]=\"separatorKeysCodes\"\r\n      [matChipInputAddOnBlur]=\"addOnBlur\"\r\n      (matChipInputTokenEnd)=\"add($event)\"\r\n    />\r\n  </mat-chip-list>\r\n  <mat-autocomplete #auto=\"matAutocomplete\" (optionSelected)=\"selected($event)\">\r\n    <mat-option\r\n      *ngFor=\"let item of filteredItems | async\"\r\n      [value]=\"item\"\r\n      [disabled]=\"isOptionDisabled(item)\"\r\n    >\r\n      {{ item.label }}\r\n    </mat-option>\r\n  </mat-autocomplete>\r\n</mat-form-field>\r\n"
        },
        {
            "name": "RadioComponent",
            "id": "component-RadioComponent-a1661d433e11c4b396c6addf62c91f871414fd4ef99d37a1c77fc6bd31db4af57007728599e12a5788172f00e2d9245bbfc124b9098c83c96ad546876f2d2462",
            "file": "src/app/shared/modules/form-control/components/radio/radio.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-radio",
            "styleUrls": [
                "./radio.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./radio.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "formControlModel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "FormControlModel",
                    "decorators": []
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "RadioOption[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_validator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorService",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { FormControlModel } from '../../interface/form-control.interface';\r\nimport { RadioOption } from '../../interface/radio-option.interface';\r\nimport { ValidatorService } from '../../service/validator.service';\r\n\r\n@Component({\r\n  selector: 'app-radio',\r\n  templateUrl: './radio.component.html',\r\n  styleUrls: ['./radio.component.scss'],\r\n})\r\nexport class RadioComponent {\r\n  @Input() formControlModel: FormControlModel;\r\n  @Input() form: FormGroup;\r\n  @Input() options: RadioOption[] = [];\r\n  constructor(public _validator: ValidatorService) {}\r\n\r\n  getOptions() {\r\n    const formControlModel = this.options;\r\n    if (formControlModel) {\r\n      return formControlModel;\r\n    }\r\n\r\n    return [];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".radio-group {\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin: 10px 0;\r\n  align-items: flex-start;\r\n}\r\n\r\n.radio-button {\r\n  margin: 5px;\r\n}\r\n",
                    "styleUrl": "./radio.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_validator",
                        "type": "ValidatorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "_validator",
                        "type": "ValidatorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div [formGroup]=\"form\">\r\n  <mat-label id=\"radio-group-label\">{{ formControlModel.label }}</mat-label>\r\n  <mat-radio-group\r\n    aria-labelledby=\"radio-group-label\"\r\n    [formControlName]=\"formControlModel.key\"\r\n    class=\"radio-group\"\r\n    [id]=\"formControlModel.key\"\r\n  >\r\n    <mat-radio-button\r\n      *ngFor=\"let item of getOptions(); let i = index\"\r\n      [value]=\"item.value\"\r\n      color=\"primary\"\r\n      class=\"radio-button\"\r\n      >{{ item.key }}</mat-radio-button\r\n    >\r\n  </mat-radio-group>\r\n</div>\r\n"
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-336a67dacb3c8846a4f01afdf77f643f9a485683fdb59d89e6145d4212e37b3b3c4346866481e57f18f760e94fe89a2b41dd603974b3aebb77da076683fe7778",
            "file": "src/app/shared/modules/form-control/components/select/select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-select",
            "styleUrls": [
                "./select.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./select.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "formControlModel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "FormControlModel",
                    "decorators": []
                },
                {
                    "name": "options",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "SelectOption[] | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selection",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_validator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorService",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getOptions",
                    "args": [],
                    "optional": false,
                    "returnType": "{}",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { FormControlModel } from '../../interface/form-control.interface';\r\nimport { SelectOption } from '../../interface/select-option.interface';\r\nimport { ValidatorService } from '../../service/validator.service';\r\n\r\n@Component({\r\n  selector: 'app-select',\r\n  templateUrl: './select.component.html',\r\n  styleUrls: ['./select.component.scss'],\r\n})\r\nexport class SelectComponent {\r\n  @Input() formControlModel: FormControlModel;\r\n  @Input() form: FormGroup;\r\n  @Input() options: SelectOption[] | null = [];\r\n  @Output() selection = new EventEmitter();\r\n  constructor(public _validator: ValidatorService) {}\r\n\r\n  getOptions() {\r\n    const formControlModel = this.options;\r\n    if (formControlModel) {\r\n      return formControlModel;\r\n    }\r\n\r\n    return [];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./select.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_validator",
                        "type": "ValidatorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 16,
                "jsdoctags": [
                    {
                        "name": "_validator",
                        "type": "ValidatorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div [formGroup]=\"form\">\r\n  <mat-form-field appearance=\"outline\">\r\n    <mat-label>{{ formControlModel.label }}</mat-label>\r\n    <mat-select\r\n      [formControlName]=\"formControlModel.key\"\r\n      [id]=\"formControlModel.key\"\r\n      (selectionChange)=\"selection.emit($event)\"\r\n    >\r\n      <mat-option *ngFor=\"let item of getOptions()\" [value]=\"item.id\">\r\n        {{ item.value }}\r\n      </mat-option>\r\n    </mat-select>\r\n    <mat-error>\r\n      {{ _validator.getError(form, formControlModel.key, formControlModel) }}\r\n    </mat-error>\r\n  </mat-form-field>\r\n</div>\r\n"
        },
        {
            "name": "SidebarComponent",
            "id": "component-SidebarComponent-be46fffb4966af4e56156becb320cfe65482447bd400adde085ae3e89ee6a3c1c60c14e32bf21a152cf27ec72983a996a0dec4cf04b383ea896d68a39330bde5",
            "file": "src/app/core/components/sidebar/sidebar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sidebar",
            "styleUrls": [
                "./sidebar.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sidebar.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-sidebar',\r\n  templateUrl: './sidebar.component.html',\r\n  styleUrls: ['./sidebar.component.scss'],\r\n})\r\nexport class SidebarComponent {}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./sidebar.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<app-side-bar-navigation></app-side-bar-navigation>\r\n<app-header></app-header>\r\n<router-outlet></router-outlet>\r\n<app-footer></app-footer>\r\n"
        },
        {
            "name": "SideBarNavigationComponent",
            "id": "component-SideBarNavigationComponent-0e0e7f679c7cb53be59f5f9b0fd33927165b23162ac13367e1c03414e30bd87dab74159ef919b6c7df7b51a62e7da3231f2f6386f339051a4eaaa52eefe3aab8",
            "file": "src/app/core/components/side-bar-navigation/side-bar-navigation.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-side-bar-navigation",
            "styleUrls": [
                "./side-bar-navigation.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./side-bar-navigation.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-side-bar-navigation',\r\n  templateUrl: './side-bar-navigation.component.html',\r\n  styleUrls: ['./side-bar-navigation.component.scss']\r\n})\r\nexport class SideBarNavigationComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./side-bar-navigation.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<p>side-bar-navigation works!</p>\r\n"
        },
        {
            "name": "StrokedButtonComponent",
            "id": "component-StrokedButtonComponent-f858b503e6211e6f88f9ca6f06f2ce62b926ae16935931367c950b985cfbbb2e464ccd5ca300b11794dbf6a155a7f2b2f607c9a66b7b18f7ed313fce206f3329",
            "file": "src/app/shared/modules/form-control/components/stroked-button/stroked-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-stroked-button",
            "styleUrls": [
                "./stroked-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./stroked-button.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "ThemePalette",
                    "decorators": []
                },
                {
                    "name": "isDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBtnClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output } from '@angular/core';\r\nimport { ThemePalette } from '@angular/material/core';\r\n\r\n@Component({\r\n  selector: 'app-stroked-button',\r\n  templateUrl: './stroked-button.component.html',\r\n  styleUrls: ['./stroked-button.component.scss']\r\n})\r\nexport class StrokedButtonComponent {\r\n\r\n  @Input() color: ThemePalette = 'primary';\r\n  @Input() type = 'button';\r\n  @Input() isDisabled = false;\r\n  @Input() label: string;\r\n  @Output() onBtnClick = new EventEmitter<Event>();\r\n\r\n  onClick(event: Event) {\r\n    this.onBtnClick.emit(event);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./stroked-button.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<button\r\n  mat-stroked-button\r\n  [disabled]=\"isDisabled\"\r\n  [color]=\"color\"\r\n  [type]=\"type\"\r\n  (click)=\"onClick($event)\"\r\n>\r\n  {{ label }}\r\n</button>\r\n"
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-5dcfa2318a075f2900aca6069e66f7b8969546e16bda73ca53ae04fe7ea804d51e438363b514439b8a9dc45fd6bbc3b11cef6c96913fef27d0597453c7e72e37",
            "file": "src/app/shared/modules/tables/components/table/table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-table",
            "styleUrls": [
                "./table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dateFormat",
                    "defaultValue": "defaultDateFormat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "noDataFoundMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tableColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "Column[]",
                    "decorators": []
                },
                {
                    "name": "tableData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "T[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selection",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "displayColumns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "fb",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormBuilder",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "filterColumns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FilterColumns[]",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "isShowFilerSection",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort | undefined",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSort"
                        }
                    ]
                },
                {
                    "name": "tableDataSource",
                    "defaultValue": "new MatTableDataSource<T>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "createFilterColumns",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "createForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getDataToDisplay",
                    "args": [
                        {
                            "name": "columnDef",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "element",
                            "type": "Record<string | object>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "object | string",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "columnDef",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "element",
                            "type": "Record<string | object>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFilterColumns",
                    "args": [],
                    "optional": false,
                    "returnType": "string[]",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getFormControls",
                    "args": [
                        {
                            "name": "col",
                            "type": "FilterColumns",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "FormControlModel",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "col",
                            "type": "FilterColumns",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getOptions",
                    "args": [
                        {
                            "name": "col",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "[] | undefined",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "col",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  OnChanges,\r\n  Output,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { FormBuilder, FormControl, FormGroup } from '@angular/forms';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { defaultDateFormat } from 'src/app/shared/common/interfaces/constants.static';\r\nimport { FormControlModel } from '../../../form-control/interface/form-control.interface';\r\nimport { SelectOption } from '../../../form-control/interface/select-option.interface';\r\nimport { Column, FilterColumns } from '../../interfaces/table-data.interface';\r\n\r\n@Component({\r\n  selector: 'app-table',\r\n  templateUrl: './table.component.html',\r\n  styleUrls: ['./table.component.scss'],\r\n})\r\nexport class TableComponent<T> implements OnChanges {\r\n  @Input() tableData: T[];\r\n  @Input() tableColumns: Column[];\r\n  @Input() dateFormat = defaultDateFormat;\r\n  @Input() noDataFoundMessage: string;\r\n  @Output() selection = new EventEmitter();\r\n  @ViewChild(MatSort) sort: MatSort | undefined;\r\n  tableDataSource = new MatTableDataSource<T>();\r\n  displayColumns: string[] = [];\r\n  filterColumns: FilterColumns[] = [];\r\n  form: FormGroup;\r\n  isShowFilerSection = true;\r\n\r\n  constructor(public fb: FormBuilder) {}\r\n\r\n  ngOnChanges(): void {\r\n    this.displayColumns = this.tableColumns.map((column) => column.columnDef);\r\n    this.createFilterColumns();\r\n    if (!this.tableData) return;\r\n    this.tableDataSource = new MatTableDataSource(this.tableData);\r\n    if (this.sort) this.tableDataSource.sort = this.sort;\r\n  }\r\n\r\n  private createFilterColumns(): void {\r\n    this.filterColumns = [];\r\n    this.tableColumns.forEach((element) => {\r\n      this.filterColumns.push({\r\n        colName: element.columnDef + '_filter',\r\n        isFilter: element.isFilter,\r\n        options: element.options,\r\n        value: element.searchValue,\r\n      });\r\n    });\r\n    const index = this.filterColumns.findIndex((e) => e.isFilter === true);\r\n    if (index < 0) {\r\n      this.isShowFilerSection = false;\r\n    }\r\n    this.createForm();\r\n  }\r\n\r\n  getOptions(col: string): SelectOption[] | undefined {\r\n    const column = this.filterColumns.find((column) => column.colName === col);\r\n    return column?.options;\r\n  }\r\n\r\n  getFilterColumns(): string[] {\r\n    return this.filterColumns.map((col) => col.colName);\r\n  }\r\n\r\n  getFormControls(col: FilterColumns): FormControlModel {\r\n    return {\r\n      key: col.colName,\r\n      value: col.value || '',\r\n      label: col.colName.split('_')[0],\r\n      inputType: 'text',\r\n    };\r\n  }\r\n\r\n  createForm(): void {\r\n    this.form = this.fb.group({});\r\n    this.filterColumns.forEach((ele) => {\r\n      if (!ele) return;\r\n      this.form.addControl(ele.colName, new FormControl());\r\n      this.form.get(ele.colName)?.setValue(ele.value);\r\n    });\r\n  }\r\n\r\n  getDataToDisplay(\r\n    columnDef: string,\r\n    element: Record<string, object>,\r\n  ): object | '' {\r\n    return element[columnDef] ? element[columnDef] : '';\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-table {\r\n  width: 100%;\r\n}\r\n",
                    "styleUrl": "./table.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 33,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnChanges"
            ],
            "templateData": "<table mat-table [dataSource]=\"tableDataSource\" matSort>\r\n  <ng-container\r\n    *ngFor=\"let col of filterColumns\"\r\n    matColumnDef=\"{{ col.colName }}\"\r\n  >\r\n    <th\r\n      mat-header-cell\r\n      *matHeaderCellDef\r\n      class=\"filter-icon sticky-filter-header\"\r\n    >\r\n      <div *ngIf=\"col.isFilter\">\r\n        <app-select\r\n          [formControlModel]=\"getFormControls(col)\"\r\n          [form]=\"form\"\r\n          [options]=\"getOptions(col.colName) || []\"\r\n          (selection)=\"\r\n            selection.emit({\r\n              id: $event.value,\r\n              column: col.colName.split('_')[0]\r\n            })\r\n          \"\r\n        ></app-select>\r\n      </div>\r\n    </th>\r\n  </ng-container>\r\n  <ng-container\r\n    *ngFor=\"let columnData of tableColumns\"\r\n    matColumnDef=\"{{ columnData.columnDef }}\"\r\n  >\r\n    <ng-container *ngIf=\"columnData.isSortable; else notSortable\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n        {{ columnData.header }}\r\n      </th>\r\n    </ng-container>\r\n\r\n    <ng-template #notSortable>\r\n      <th mat-header-cell *matHeaderCellDef>\r\n        {{ columnData.header }}\r\n      </th>\r\n    </ng-template>\r\n\r\n    <td mat-cell *matCellDef=\"let element\">\r\n      <ng-container\r\n        *ngIf=\"\r\n          getDataToDisplay(columnData.columnDef, element) === '' &&\r\n            columnData.type != 'boolean' &&\r\n            columnData.columnDef != 'more_option';\r\n          else columnHasValue\r\n        \"\r\n      >\r\n        <span class=\"column-no-data\"> -- </span>\r\n      </ng-container>\r\n\r\n      <ng-template #columnHasValue>\r\n        <ng-container\r\n          *ngIf=\"columnData.columnDef != 'more_option'; else columnHasAction\"\r\n        >\r\n          <span *ngIf=\"columnData.type != 'DateTime'\">\r\n            {{ element[columnData.columnDef] }}\r\n          </span>\r\n          <span *ngIf=\"columnData.type === 'DateTime'\">\r\n            {{ element[columnData.columnDef] | date : dateFormat }}\r\n          </span>\r\n        </ng-container>\r\n        <ng-template #columnHasAction>\r\n          <button\r\n            mat-icon-button\r\n            *ngFor=\"let btn of columnData.actions\"\r\n            (click)=\"selection.emit({ data: element, action: btn })\"\r\n          >\r\n            <mat-icon>{{ btn }}</mat-icon>\r\n          </button>\r\n        </ng-template>\r\n      </ng-template>\r\n    </td>\r\n  </ng-container>\r\n  <tr mat-header-row *matHeaderRowDef=\"displayColumns\"></tr>\r\n\r\n  <ng-container *ngIf=\"isShowFilerSection\">\r\n    <tr mat-header-row *matHeaderRowDef=\"getFilterColumns()\"></tr>\r\n  </ng-container>\r\n\r\n  <tr mat-row *matRowDef=\"let row; columns: displayColumns\"></tr>\r\n\r\n  <tr class=\"mat-row\" *matNoDataRow>\r\n    <td class=\"mat-cell noData\" [attr.colspan]=\"displayColumns.length\">\r\n      <app-no-data-found [message]=\"noDataFoundMessage\"></app-no-data-found>\r\n    </td>\r\n  </tr>\r\n</table>\r\n"
        },
        {
            "name": "TableWithoutFilterComponent",
            "id": "component-TableWithoutFilterComponent-864080d024bb051493f50e90c1570e744a479aa1d28fb0e6cc9f536d11103e673a0cbc2a5f7f873a333de17e29bb4cbeef1671827fa50e137e4d999256483258",
            "file": "src/app/shared/modules/tables/components/table-without-filter/table-without-filter.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-table-without-filter",
            "styleUrls": [
                "./table-without-filter.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./table-without-filter.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "tableColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "Column[]",
                    "decorators": []
                },
                {
                    "name": "tableData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selection",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "displayColumns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "sort",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatSort | undefined",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "MatSort"
                        }
                    ]
                },
                {
                    "name": "tableDataSource",
                    "defaultValue": "new MatTableDataSource<T>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "getDataToDisplay",
                    "args": [
                        {
                            "name": "columnDef",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "element",
                            "type": "Record<string | object>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "object | string",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "columnDef",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "element",
                            "type": "Record<string | object>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getUniqueName",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "isControl",
                    "args": [
                        {
                            "name": "columnData",
                            "type": "Column",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "columnData",
                            "type": "Column",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  ViewChild,\r\n  OnChanges,\r\n  OnInit,\r\n} from '@angular/core';\r\nimport { MatSort } from '@angular/material/sort';\r\nimport { MatTableDataSource } from '@angular/material/table';\r\nimport { Column } from 'src/app/shared/modules/tables/interfaces/table-data.interface';\r\n\r\n@Component({\r\n  selector: 'app-table-without-filter',\r\n  templateUrl: './table-without-filter.component.html',\r\n  styleUrls: ['./table-without-filter.component.scss'],\r\n})\r\nexport class TableWithoutFilterComponent<T> implements OnInit, OnChanges {\r\n  @Input() tableColumns: Column[];\r\n  @Input() tableData: any;\r\n  @Output() selection = new EventEmitter();\r\n  @ViewChild(MatSort) sort: MatSort | undefined;\r\n  tableDataSource = new MatTableDataSource<T>();\r\n  displayColumns: string[] = [];\r\n\r\n  ngOnInit(): void {\r\n    this.displayColumns = this.tableColumns.map((column) => column.columnDef);\r\n  }\r\n\r\n  ngOnChanges(): void {\r\n    if (this.tableData)\r\n      this.tableDataSource = new MatTableDataSource(this.tableData);\r\n\r\n    if (this.sort) this.tableDataSource.sort = this.sort;\r\n  }\r\n\r\n  getUniqueName(name: string, index: number) {\r\n    return `${name}_${index}`;\r\n  }\r\n\r\n  isControl(columnData: Column) {\r\n    return (\r\n      columnData.type == 'toggle' ||\r\n      columnData.type == 'radio' ||\r\n      columnData.type == 'textInput'\r\n    );\r\n  }\r\n\r\n  getDataToDisplay(\r\n    columnDef: string,\r\n    element: Record<string, object>,\r\n  ): object | '' {\r\n    return element[columnDef] ? element[columnDef] : '';\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".mat-table {\r\n  width: 100%;\r\n}\r\n",
                    "styleUrl": "./table-without-filter.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit",
                "OnChanges"
            ],
            "templateData": "<table mat-table [dataSource]=\"tableDataSource\" matSort>\r\n  <ng-container\r\n    *ngFor=\"let columnData of tableColumns\"\r\n    matColumnDef=\"{{ columnData.columnDef }}\"\r\n  >\r\n    <ng-container *ngIf=\"columnData.isSortable; else notSortable\">\r\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>\r\n        {{ columnData.header }}\r\n      </th>\r\n    </ng-container>\r\n\r\n    <ng-template #notSortable>\r\n      <th mat-header-cell *matHeaderCellDef>\r\n        {{ columnData.header }}\r\n      </th>\r\n    </ng-template>\r\n\r\n    <td mat-cell *matCellDef=\"let element; let i = index\">\r\n      <ng-container\r\n        *ngIf=\"\r\n          getDataToDisplay(columnData.columnDef, element) === '' &&\r\n            isControl(columnData) == false;\r\n          else columnHasValue\r\n        \"\r\n      >\r\n        <span class=\"column-no-data\"> -- </span>\r\n      </ng-container>\r\n      <ng-template #columnHasValue>\r\n        <ng-container\r\n          *ngIf=\"isControl(columnData) == false; else columnHasInput\"\r\n        >\r\n          <span>\r\n            {{ element[columnData.columnDef] }}\r\n          </span>\r\n        </ng-container>\r\n        <ng-template #columnHasInput>\r\n          <div *ngIf=\"columnData.type == 'toggle'\">\r\n            <mat-slide-toggle\r\n              (change)=\"\r\n                selection.emit({\r\n                  data: $event,\r\n                  element: element,\r\n                  columnDef: columnData.columnDef\r\n                })\r\n              \"\r\n              [checked]=\"element[columnData.columnDef]\"\r\n            ></mat-slide-toggle>\r\n          </div>\r\n          <div *ngIf=\"columnData.type == 'radio'\">\r\n            <mat-radio-button\r\n              (change)=\"\r\n                selection.emit({\r\n                  data: $event,\r\n                  element: element,\r\n                  columnDef: columnData.columnDef\r\n                })\r\n              \"\r\n              [checked]=\"element[columnData.columnDef]\"\r\n            >\r\n            </mat-radio-button>\r\n          </div>\r\n          <div *ngIf=\"columnData.type == 'textInput'\">\r\n            <mat-form-field appearance=\"outline\">\r\n              <input\r\n                matInput\r\n                value=\"{{ element[columnData.columnDef] }}\"\r\n                (change)=\"\r\n                  selection.emit({\r\n                    data: $event,\r\n                    element: element,\r\n                    columnDef: columnData.columnDef\r\n                  })\r\n                \"\r\n              />\r\n            </mat-form-field>\r\n          </div>\r\n        </ng-template>\r\n      </ng-template>\r\n    </td>\r\n  </ng-container>\r\n  <tr mat-header-row *matHeaderRowDef=\"displayColumns\"></tr>\r\n  <tr mat-row *matRowDef=\"let row; columns: displayColumns\"></tr>\r\n</table>\r\n"
        },
        {
            "name": "TextControlComponent",
            "id": "component-TextControlComponent-dbc8c9b2f8e0d181b7ad3f529a561305dfe321b4d649a55ec43b50a4044d905b2a60fdda3e6fce63f05d49c2ced99c47e6e7246d2fd82c4d6f8e85130ea0c897",
            "file": "src/app/shared/modules/form-control/components/text-control/text-control.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-text-control",
            "styleUrls": [
                "./text-control.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./text-control.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "formControlModel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "FormControlModel",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "iconClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter"
                },
                {
                    "name": "inputChange",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_validator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorService",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onIconClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { FormControlModel } from '../../interface/form-control.interface';\r\nimport { ValidatorService } from '../../service/validator.service';\r\n\r\n@Component({\r\n  selector: 'app-text-control',\r\n  templateUrl: './text-control.component.html',\r\n  styleUrls: ['./text-control.component.scss'],\r\n})\r\nexport class TextControlComponent {\r\n  @Input() formControlModel: FormControlModel;\r\n  @Input() form: FormGroup;\r\n  @Output() inputChange = new EventEmitter<string>();\r\n  @Output() iconClick = new EventEmitter<Event>();  \r\n\r\n  constructor(public _validator: ValidatorService) {}\r\n\r\n  onChange(event: Event) {\r\n    const data = event?.target as HTMLInputElement;\r\n    this.inputChange.emit(data?.value);\r\n  }\r\n\r\n  onIconClick(event: Event) {\r\n    this.iconClick.emit(event);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./text-control.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_validator",
                        "type": "ValidatorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "_validator",
                        "type": "ValidatorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div [formGroup]=\"form\">\r\n  <mat-form-field appearance=\"outline\">\r\n    <mat-label>{{ formControlModel.label }}</mat-label>\r\n    <input\r\n      matInput\r\n      [formControlName]=\"formControlModel.key\"\r\n      [id]=\"formControlModel.key\"\r\n      [type]=\"formControlModel.inputType\"\r\n      (input)=\"onChange($event)\"\r\n    />\r\n    <mat-icon matSuffix *ngIf=\"formControlModel.displayIcon\"  (click)=\"onIconClick($event)\">{{ formControlModel.iconName }}</mat-icon>\r\n    <mat-error>\r\n      {{ _validator.getError(form, formControlModel.key, formControlModel) }}\r\n    </mat-error>\r\n  </mat-form-field>\r\n</div>\r\n"
        },
        {
            "name": "TextControlNumberComponent",
            "id": "component-TextControlNumberComponent-a7ba3551d31b6d99c3c5afbeaec6b18a2b0efd3ccc324e6ba4f6ae00b2a526f6bc3d1fa4c99b15a20fa76189d27a3ee6c8d71d4bbba9f69336e8f535e99856c8",
            "file": "src/app/shared/modules/form-control/components/text-control-number/text-control-number.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-text-control-number",
            "styleUrls": [
                "./text-control-number.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./text-control-number.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "formControlModel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "FormControlModel",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "_validator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ValidatorService",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { FormControlModel } from '../../interface/form-control.interface';\r\nimport { ValidatorService } from '../../service/validator.service';\r\n\r\n@Component({\r\n  selector: 'app-text-control-number',\r\n  templateUrl: './text-control-number.component.html',\r\n  styleUrls: ['./text-control-number.component.scss'],\r\n})\r\nexport class TextControlNumberComponent {\r\n  @Input() formControlModel: FormControlModel;\r\n  @Input() form: FormGroup;\r\n  constructor(public _validator: ValidatorService) {}\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./text-control-number.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "_validator",
                        "type": "ValidatorService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 13,
                "jsdoctags": [
                    {
                        "name": "_validator",
                        "type": "ValidatorService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "templateData": "<div [formGroup]=\"form\">\r\n  <mat-form-field appearance=\"outline\">\r\n    <mat-label>{{ formControlModel.label }}</mat-label>\r\n    <input\r\n      matInput\r\n      [formControlName]=\"formControlModel.key\"\r\n      [id]=\"formControlModel.key\"\r\n      numbersOnly\r\n    />\r\n    <mat-error>\r\n      {{ _validator.getError(form, formControlModel.key, formControlModel) }}\r\n    </mat-error>\r\n  </mat-form-field>\r\n</div>\r\n"
        },
        {
            "name": "TimePickerComponent",
            "id": "component-TimePickerComponent-64c7c5d0b4c69d8b9a2b1eb12a9a23d7dadc2b12a92e0376952853239c5cbc429cd7ba18e4b0f8a2c5bf9c979e9c39c32b03ac91852db519d76513ed977c89d7",
            "file": "src/app/shared/modules/form-control/components/time-picker/time-picker.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-time-picker",
            "styleUrls": [
                "./time-picker.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./time-picker.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "timePickerModel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "TimePickerModel",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "timeChanged",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "formControlItem",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "selectedTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "timepicker",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'timepicker'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "changeTime",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClear",
                    "args": [
                        {
                            "name": "$event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openFromIcon",
                    "args": [
                        {
                            "name": "timepicker",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "timepicker",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setNow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  ViewChild,\r\n} from '@angular/core';\r\nimport { FormControl, FormGroup } from '@angular/forms';\r\nimport { TimePickerModel } from '../../interface/time-picker.interface';\r\n\r\n@Component({\r\n  selector: 'app-time-picker',\r\n  templateUrl: './time-picker.component.html',\r\n  styleUrls: ['./time-picker.component.scss'],\r\n})\r\nexport class TimePickerComponent {\r\n  selectedTime: any;\r\n  formControlItem: FormControl = new FormControl('');\r\n  @Output() timeChanged = new EventEmitter<string>();\r\n  @Input() form: FormGroup;\r\n  @Input() timePickerModel: TimePickerModel;\r\n\r\n  @ViewChild('timepicker') timepicker: any;\r\n\r\n  openFromIcon(timepicker: { open: () => void }) {\r\n    if (!this.formControlItem.disabled) {\r\n      timepicker.open();\r\n    }\r\n  }\r\n\r\n  onClear($event: Event) {\r\n    this.formControlItem.setValue(null);\r\n  }\r\n\r\n  changeTime() {\r\n    this.timeChanged.emit(this.formControlItem.value);\r\n  }\r\n\r\n  setNow() {\r\n    const now = new Date();\r\n    const hours = ('0' + now.getHours()).slice(-2);\r\n    const minutes = ('0' + now.getMinutes()).slice(-2);\r\n    const str = hours + ':' + minutes;\r\n    this.formControlItem.setValue(str);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".setButton {\r\n  margin-left: 10px;\r\n}\r\n",
                    "styleUrl": "./time-picker.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div [formGroup]=\"form\">\r\n  <mat-form-field appearance=\"outline\" id=\"matPicker\">\r\n    <mat-label>{{ timePickerModel.label }}</mat-label>\r\n    <input\r\n      [type]=\"timePickerModel.inputType\"\r\n      [name]=\"timePickerModel.key\"\r\n      matInput\r\n      [ngxMatTimepicker]=\"timepicker\"\r\n      [format]=\"timePickerModel.format\"\r\n      [required]=\"timePickerModel.required\"\r\n      readonly\r\n      [formControl]=\"formControlItem\"\r\n      [id]=\"timePickerModel.key\"\r\n      (ngModelChange)=\"changeTime()\"\r\n    />\r\n\r\n    <mat-icon\r\n      matPrefix\r\n      *ngIf=\"\r\n        formControlItem.value &&\r\n        !formControlItem.disabled &&\r\n        !timePickerModel.required\r\n      \"\r\n      (click)=\"onClear($event)\"\r\n    >\r\n      close\r\n    </mat-icon>\r\n\r\n    <mat-icon\r\n      matSuffix\r\n      *ngIf=\"!formControlItem.disabled\"\r\n      (click)=\"openFromIcon(timepicker)\"\r\n    >\r\n      schedule\r\n    </mat-icon>\r\n  </mat-form-field>\r\n  <ngx-mat-timepicker #timepicker></ngx-mat-timepicker>\r\n  <app-button\r\n    class=\"setButton\"\r\n    type=\"submit\"\r\n    label=\"Set Now\"\r\n    (btnClick)=\"setNow()\"\r\n    *ngIf=\"timePickerModel.setNowButton\"\r\n  >\r\n  </app-button>\r\n</div>\r\n"
        },
        {
            "name": "ToggleComponent",
            "id": "component-ToggleComponent-7f448a15babbaf21f8df850b13469e7fa404c917dbffebd817ea46914dcf0125598dae590c94f4199283d7f202363c72654d729e43144cb14ca29eb1805761d0",
            "file": "src/app/shared/modules/form-control/components/toggle/toggle.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-toggle",
            "styleUrls": [
                "./toggle.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./toggle.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "form",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "FormGroup",
                    "decorators": []
                },
                {
                    "name": "formControlModel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "FormControlModel",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "toggleEmitter",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { FormControlModel } from '../../interface/form-control.interface';\r\n\r\n@Component({\r\n  selector: 'app-toggle',\r\n  templateUrl: './toggle.component.html',\r\n  styleUrls: ['./toggle.component.scss'],\r\n})\r\nexport class ToggleComponent {\r\n  @Input() form: FormGroup;\r\n  @Input() formControlModel: FormControlModel;\r\n  @Output() toggleEmitter = new EventEmitter();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./toggle.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div>{{ formControlModel.label }}</div>\r\n<div [formGroup]=\"form\">\r\n  <mat-slide-toggle\r\n    color=\"primary\"\r\n    [formControlName]=\"formControlModel.key\"\r\n    (change)=\"toggleEmitter.emit($event)\"\r\n  ></mat-slide-toggle>\r\n</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppControlsModule",
            "id": "module-AppControlsModule-0e7dd45e577d05e2b8cd05083a43d7fcfa98f8254ce03ecce29403f20c6c49776bfc768997e6be0d58b28bd94d38567ee43af0aef20dcb13699d050926c6f508",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-controls/app-controls.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AppControlsRoutingModule } from './app-controls-routing.module';\r\nimport { SharedMaterialModule } from '../shared/material/shared-material.module';\r\nimport { FormControlModule } from '../shared/modules/form-control/form-control.module';\r\nimport { AppControlsComponent } from './component/app-controls.component';\r\n\r\n@NgModule({\r\n  declarations: [AppControlsComponent],\r\n  imports: [\r\n    CommonModule,\r\n    AppControlsRoutingModule,\r\n    SharedMaterialModule,\r\n    FormControlModule,\r\n  ],\r\n})\r\nexport class AppControlsModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppControlsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppControlsRoutingModule"
                        },
                        {
                            "name": "FormControlModule"
                        },
                        {
                            "name": "SharedMaterialModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppControlsRoutingModule",
            "id": "module-AppControlsRoutingModule-3770f71dcccd72e9ece9ae8076f633fcc38aac8dc91627928c1ec730167f599376a7dc577dd9500308ef37fd8cf9b71e4ed7d6df169588ec0958d42514a17352",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-controls/app-controls-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { AppControlsComponent } from './component/app-controls.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: AppControlsComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AppControlsRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppModule",
            "id": "module-AppModule-0f6b3371847b5f1667beea4a3f0534f5ecd97b5ab7801ae4f5c449c108acdc320367cf9471041037aea7458eb1d46c816134842dfaeef375c918396480da52d4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { HTTP_INTERCEPTORS } from '@angular/common/http';\r\nimport { NgModule } from '@angular/core';\r\nimport { BrowserModule } from '@angular/platform-browser';\r\n\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AppComponent } from './app.component';\r\nimport { AuthTokenInterceptor } from './core/interceptors/auth/auth-token.interceptor';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n\r\n@NgModule({\r\n  declarations: [AppComponent],\r\n  imports: [BrowserModule, AppRoutingModule, BrowserAnimationsModule],\r\n  providers: [\r\n    {\r\n      provide: HTTP_INTERCEPTORS,\r\n      useClass: AuthTokenInterceptor,\r\n      multi: true,\r\n    },\r\n  ],\r\n  bootstrap: [AppComponent],\r\n})\r\nexport class AppModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "AuthTokenInterceptor"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-5254cbac2baabeb513a717575a74b710509b7852500928a67fbe1016ac5c41edea920e150f5bf647c299077ef3402a5bdd01438dc7a909602b622491668a1bbe",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    loadChildren: () =>\r\n      \"import('./core/auth/auth.module').then((m) => m.AuthModule)\",\r\n  },\r\n  {\r\n    path: 'admin',\r\n    loadChildren: () => \"import('./core/core.module').then((m) => m.CoreModule)\",\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AppRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthModule",
            "id": "module-AuthModule-2ea44d1dc7cf5107a3081c45f7c7cd6e40ef2661c8401e55edfd42e40ae5bf4d25580b5bd55d92fd1b1a7a59d019821d7eb474a7ccdc95c5ee51e948536b531e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/core/auth/auth.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LoginComponent } from './components/login/login.component';\r\nimport { AuthRoutingModule } from './auth-routing.module';\r\nimport { SharedModule } from 'src/app/shared/shared.module';\r\n\r\n@NgModule({\r\n  declarations: [LoginComponent],\r\n  imports: [CommonModule, AuthRoutingModule, SharedModule],\r\n})\r\nexport class AuthModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "LoginComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AuthRoutingModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AuthRoutingModule",
            "id": "module-AuthRoutingModule-ef5329a7b009be9f25892d942a113efbb7f2cbb8e3ff515fe39513d17e54d6398c3bb96ae689cc9a55f3018d5e4903de01e2f996bd88c08579108c812ab7f616",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/core/auth/auth-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { LoginComponent } from './components/login/login.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: LoginComponent,\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class AuthRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreModule",
            "id": "module-CoreModule-5616f7915bda6a2932f00695ef8be20925bd58b613c7f0922482d8fe5198111d3ba5e68a0dcb3efd805eaa07418a9bb08483493e51cba07835c7dd77061fc4ec",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/core/core.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { CoreComponent } from './core.component';\r\nimport { SidebarComponent } from './components/sidebar/sidebar.component';\r\nimport { HeaderComponent } from './components/header/header.component';\r\nimport { FooterComponent } from './components/footer/footer.component';\r\nimport { SideBarNavigationComponent } from './components/side-bar-navigation/side-bar-navigation.component';\r\nimport { RouterModule } from '@angular/router';\r\nimport { CoreRoutingModule } from './core-routing.module';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    CoreComponent,\r\n    SidebarComponent,\r\n    HeaderComponent,\r\n    FooterComponent,\r\n    SideBarNavigationComponent,\r\n  ],\r\n  imports: [CommonModule, RouterModule, CoreRoutingModule],\r\n})\r\nexport class CoreModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "CoreComponent"
                        },
                        {
                            "name": "FooterComponent"
                        },
                        {
                            "name": "HeaderComponent"
                        },
                        {
                            "name": "SideBarNavigationComponent"
                        },
                        {
                            "name": "SidebarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "CoreRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "CoreRoutingModule",
            "id": "module-CoreRoutingModule-3c1638f32f4a42a2f66a0de009eda510b2c0e65c8a81f71097d948882dddfc248870d3009ed0296287be814e3a5ce8fe446a763749e6651a3598d76c0712a270",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/core/core-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { CoreComponent } from './core.component';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: CoreComponent,\r\n    // canActivate: [AuthGuardService],\r\n    children: [\r\n      {\r\n        path: 'app-control',\r\n        loadChildren: () =>\r\n          \"import('../app-controls/app-controls.module').then(\\\n            (m) => m.AppControlsModule,\\\n          )\",\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class CoreRoutingModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FormControlModule",
            "id": "module-FormControlModule-b5d9a98910fa299981e3047add7e3661601f5781335ebcc924edb6b9f8b7d6921e4a31475111fba1530bb8dd31ecbd94e6fef5fbb162eb64a0993acea078e63b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/modules/form-control/form-control.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ButtonComponent } from './components/button/button.component';\r\nimport { TextControlComponent } from './components/text-control/text-control.component';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { SharedModule } from 'src/app/shared/shared.module';\r\nimport { TimePickerComponent } from './components/time-picker/time-picker.component';\r\nimport { NgxMatTimepickerModule } from 'ngx-mat-timepicker';\r\nimport { ToggleComponent } from './components/toggle/toggle.component';\r\nimport { MultiChipSelectComponent } from './components/multi-chip-select/multi-chip-select.component';\r\nimport { RadioComponent } from './components/radio/radio.component';\r\nimport { CheckboxComponent } from './components/checkbox/checkbox.component';\r\nimport { SelectComponent } from './components/select/select.component';\r\nimport { TextControlNumberComponent } from './components/text-control-number/text-control-number.component';\r\nimport { NumbersOnlyDirective } from './directives/numbers-only.directive';\r\nimport { FileUploadComponent } from './components/file-upload/file-upload.component';\r\nimport { SharedMaterialModule } from 'src/app/shared/material/shared-material.module';\r\nimport { DatePickerComponent } from './components/date-picker/date-picker.component';\r\nimport { StrokedButtonComponent } from './components/stroked-button/stroked-button.component';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ButtonComponent,\r\n    TextControlComponent,\r\n    ToggleComponent,\r\n    MultiChipSelectComponent,\r\n    RadioComponent,\r\n    CheckboxComponent,\r\n    SelectComponent,\r\n    TextControlNumberComponent,\r\n    FileUploadComponent,\r\n    TimePickerComponent,\r\n    // directives\r\n    NumbersOnlyDirective,    \r\n    DatePickerComponent, \r\n    StrokedButtonComponent,\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    SharedModule,\r\n    FormsModule,\r\n    NgxMatTimepickerModule,\r\n    SharedMaterialModule,\r\n  ],\r\n  exports: [\r\n    ButtonComponent,\r\n    TextControlComponent,\r\n    ToggleComponent,\r\n    MultiChipSelectComponent,\r\n    RadioComponent,\r\n    CheckboxComponent,\r\n    SelectComponent,\r\n    TextControlNumberComponent,\r\n    FileUploadComponent,\r\n    TimePickerComponent,\r\n    // directives\r\n    NumbersOnlyDirective,    \r\n    DatePickerComponent,\r\n    StrokedButtonComponent,\r\n  ],\r\n})\r\nexport class FormControlModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "CheckboxComponent"
                        },
                        {
                            "name": "DatePickerComponent"
                        },
                        {
                            "name": "FileUploadComponent"
                        },
                        {
                            "name": "MultiChipSelectComponent"
                        },
                        {
                            "name": "NumbersOnlyDirective"
                        },
                        {
                            "name": "RadioComponent"
                        },
                        {
                            "name": "SelectComponent"
                        },
                        {
                            "name": "StrokedButtonComponent"
                        },
                        {
                            "name": "TextControlComponent"
                        },
                        {
                            "name": "TextControlNumberComponent"
                        },
                        {
                            "name": "TimePickerComponent"
                        },
                        {
                            "name": "ToggleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedMaterialModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "CheckboxComponent"
                        },
                        {
                            "name": "DatePickerComponent"
                        },
                        {
                            "name": "FileUploadComponent"
                        },
                        {
                            "name": "MultiChipSelectComponent"
                        },
                        {
                            "name": "NumbersOnlyDirective"
                        },
                        {
                            "name": "RadioComponent"
                        },
                        {
                            "name": "SelectComponent"
                        },
                        {
                            "name": "StrokedButtonComponent"
                        },
                        {
                            "name": "TextControlComponent"
                        },
                        {
                            "name": "TextControlNumberComponent"
                        },
                        {
                            "name": "TimePickerComponent"
                        },
                        {
                            "name": "ToggleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedMaterialModule",
            "id": "module-SharedMaterialModule-158000b62d068ddf969406c1b46681506d96ed4b80a3d290e074f63020fa926bced3b055b731b5ca3b257135a3502d9dace347a0c3589b0f6e7be72fcb55db8f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/material/shared-material.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { MatFormFieldModule } from '@angular/material/form-field';\r\nimport { MatInputModule } from '@angular/material/input';\r\nimport { MatCardModule } from '@angular/material/card';\r\nimport { MatButtonModule } from '@angular/material/button';\r\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\r\nimport { MatSelectModule } from '@angular/material/select';\r\nimport { MatTableModule } from '@angular/material/table';\r\nimport { MatRadioModule } from '@angular/material/radio';\r\nimport { MatPaginatorModule } from '@angular/material/paginator';\r\nimport { MatIconModule } from '@angular/material/icon';\r\nimport { MatGridListModule } from '@angular/material/grid-list';\r\nimport { MatDatepickerModule } from '@angular/material/datepicker';\r\nimport { MatSlideToggleModule } from '@angular/material/slide-toggle';\r\nimport { MatSortModule } from '@angular/material/sort';\r\nimport { MatChipsModule } from '@angular/material/chips';\r\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\r\nimport { MatTreeModule } from '@angular/material/tree';\r\nimport { MatCheckboxModule } from '@angular/material/checkbox';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MatDialogModule } from '@angular/material/dialog';\r\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\r\nimport { MatToolbarModule } from '@angular/material/toolbar';\r\nimport { MatSidenavModule } from '@angular/material/sidenav';\r\nimport { MatDividerModule } from '@angular/material/divider';\r\nimport { MatListModule } from '@angular/material/list';\r\nimport { MatExpansionModule } from '@angular/material/expansion';\r\nimport { MatTabsModule } from '@angular/material/tabs';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    CommonModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatCardModule,\r\n    MatButtonModule,\r\n    MatSnackBarModule,\r\n    MatPaginatorModule,\r\n    MatTableModule,\r\n    MatSelectModule,\r\n    MatSlideToggleModule,\r\n    MatTabsModule\r\n  ],\r\n  exports: [\r\n    MatChipsModule,\r\n    MatAutocompleteModule,\r\n    MatFormFieldModule,\r\n    MatInputModule,\r\n    MatCardModule,\r\n    MatButtonModule,\r\n    MatSnackBarModule,\r\n    MatTableModule,\r\n    MatSelectModule,\r\n    MatRadioModule,\r\n    MatPaginatorModule,\r\n    MatIconModule,\r\n    MatGridListModule,\r\n    MatDatepickerModule,\r\n    MatSlideToggleModule,\r\n    MatSortModule,\r\n    MatTreeModule,\r\n    MatCheckboxModule,\r\n    MatDialogModule,\r\n    MatProgressSpinnerModule,\r\n    MatToolbarModule,\r\n    MatSidenavModule,\r\n    MatDividerModule,\r\n    MatListModule,\r\n    MatExpansionModule,\r\n    MatTabsModule\r\n  ],\r\n  providers: [MatDatepickerModule],\r\n})\r\nexport class SharedMaterialModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "SharedModule",
            "id": "module-SharedModule-6155bb46c38b65a947bae0bcb4c57b3571f9a8e5f30ec91a38456310edb96342ee169a81aa31362c56a36bddf879e731c1338635a4d23f0e2f4956a1a601aab3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/shared.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SharedMaterialModule } from './material/shared-material.module';\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [CommonModule, SharedMaterialModule],\r\n  exports: [SharedMaterialModule],\r\n})\r\nexport class SharedModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "SharedMaterialModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "SharedMaterialModule"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "TablesModule",
            "id": "module-TablesModule-cb3a2d0a5de2b56b507987230ab40d211540682f7bcacebf7493447c27529e17ccf0c136be8883c43f937720e8f1ac725bdeab7dde871c834303e7ec8076cdf1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/shared/modules/tables/tables.module.ts",
            "methods": [],
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { TableWithoutFilterComponent } from 'src/app/shared/modules/tables/components/table-without-filter/table-without-filter.component';\r\nimport { SharedMaterialModule } from 'src/app/shared/material/shared-material.module';\r\nimport { SharedModule } from '../../shared.module';\r\nimport { FormControlModule } from '../form-control/form-control.module';\r\nimport { TableComponent } from './components/table/table.component';\r\n\r\n@NgModule({\r\n  declarations: [TableComponent, TableWithoutFilterComponent],\r\n  exports: [TableComponent, TableWithoutFilterComponent],\r\n  imports: [\r\n    CommonModule,\r\n    SharedMaterialModule,\r\n    FormsModule,\r\n    FormControlModule,\r\n    SharedModule,\r\n  ],\r\n})\r\nexport class TablesModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "TableComponent"
                        },
                        {
                            "name": "TableWithoutFilterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FormControlModule"
                        },
                        {
                            "name": "SharedMaterialModule"
                        },
                        {
                            "name": "SharedModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "TableComponent"
                        },
                        {
                            "name": "TableWithoutFilterComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "appControls",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app-controls/configs/app-controls.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  textField: {\r\n    value: '',\r\n    key: 'textField',\r\n    label: 'Text Control',\r\n    requiredErrMsg: 'Text Control is Required',\r\n    inputType: 'text',\r\n    displayIcon: true,\r\n    iconName: 'visibility'\r\n  },\r\n  numberField: {\r\n    value: '',\r\n    key: 'numberField',\r\n    label: 'Number Control',\r\n    inputType: 'text',\r\n    requiredErrMsg: 'Number Control is Required',\r\n  },\r\n  selectField: {\r\n    value: '',\r\n    key: 'selectField',\r\n    label: 'Select Control',\r\n    inputType: 'select',\r\n    requiredErrMsg: 'Select Control is Required',\r\n  },\r\n  multiChipSelectField: {\r\n    type: 'multi-chip-select',\r\n    value: '',\r\n    key: 'multiChipSelectField',\r\n    label: 'Multi Chip Select Field',\r\n    required: true,\r\n    inputType: '',\r\n  },\r\n  timePickerField: {\r\n    value: '',\r\n    key: 'timePickerField',\r\n    label: 'Time Picker Control',\r\n    inputType: 'text',\r\n    required: true,\r\n    setNowButton: true,\r\n    format: 24,\r\n  },\r\n  toggleField: {\r\n    value: '',\r\n    key: 'toggleField',\r\n    label: 'Toggle Control',\r\n    inputType: 'toggle',\r\n  },\r\n  radioField: {\r\n    value: '',\r\n    key: 'radioField',\r\n    label: 'Radio Control',\r\n    inputType: 'radio',\r\n  },\r\n  checkboxField: {\r\n    value: '',\r\n    key: 'checkboxField',\r\n    label: 'Checkbox Control',\r\n    inputType: 'checkbox',\r\n    requiredErrMsg: 'Checkbox Control is Required',\r\n  },\r\n  fileUploadField: {\r\n    value: '',\r\n    key: 'fileUploadField',\r\n    label: 'File Upload Control',\r\n    inputType: 'file',\r\n    requiredErrMsg: 'File Upload Control is Required',\r\n  },\r\n  datePickerField: {\r\n    value: '',\r\n    key: 'datePickerField',\r\n    label: 'Date Picker Control',\r\n    inputType: 'text',\r\n  },\r\n}"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "DATE_FORMATS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/modules/form-control/components/date-picker/date-picker.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  parse: {\r\n    dateInput: 'DD-MM-YYYY',\r\n  },\r\n  display: {\r\n    dateInput: 'DD-MM-YYYY',\r\n    monthYearLabel: 'MMM YYYY',\r\n    dateA11yLabel: 'LL',\r\n    monthYearA11yLabel: 'MMMM YYYY',\r\n  },\r\n}"
            },
            {
                "name": "defaultDateFormat",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/common/interfaces/constants.static.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'dd/MM/yyyy'"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: true\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false\r\n}"
            },
            {
                "name": "multiChipSelect",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app-controls/configs/app-controls.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  {\r\n    label: 'Test 1',\r\n    value: 1,\r\n  },\r\n  {\r\n    label: 'Test 2',\r\n    value: 2,\r\n  },\r\n  {\r\n    label: 'Test 3',\r\n    value: 3,\r\n  },\r\n]"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/modules/form-control/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "radioOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app-controls/configs/app-controls.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  {\r\n    key: 'Radio 1',\r\n    value: 'Select Option 1',\r\n  },\r\n  {\r\n    key: 'Radio 2',\r\n    value: 'Select Option 2',\r\n  },\r\n  {\r\n    key: 'Radio 3',\r\n    value: 'Select Option 3',\r\n  },\r\n]"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/modules/form-control/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "selectOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app-controls/configs/app-controls.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  {\r\n    id: 1,\r\n    key: 'Select1',\r\n    value: 'Select Option 1',\r\n  },\r\n  {\r\n    id: 2,\r\n    key: 'Select2',\r\n    value: 'Select Option 2',\r\n  },\r\n  {\r\n    id: 3,\r\n    key: 'Select3',\r\n    value: 'Select Option 3',\r\n  },\r\n]"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/modules/form-control/components/button/button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<ButtonComponent>",
                "defaultValue": "(args: ButtonComponent) => ({\r\n  props: args,\r\n})"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/app-controls/configs/app-controls.config.ts": [
                {
                    "name": "appControls",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app-controls/configs/app-controls.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  textField: {\r\n    value: '',\r\n    key: 'textField',\r\n    label: 'Text Control',\r\n    requiredErrMsg: 'Text Control is Required',\r\n    inputType: 'text',\r\n    displayIcon: true,\r\n    iconName: 'visibility'\r\n  },\r\n  numberField: {\r\n    value: '',\r\n    key: 'numberField',\r\n    label: 'Number Control',\r\n    inputType: 'text',\r\n    requiredErrMsg: 'Number Control is Required',\r\n  },\r\n  selectField: {\r\n    value: '',\r\n    key: 'selectField',\r\n    label: 'Select Control',\r\n    inputType: 'select',\r\n    requiredErrMsg: 'Select Control is Required',\r\n  },\r\n  multiChipSelectField: {\r\n    type: 'multi-chip-select',\r\n    value: '',\r\n    key: 'multiChipSelectField',\r\n    label: 'Multi Chip Select Field',\r\n    required: true,\r\n    inputType: '',\r\n  },\r\n  timePickerField: {\r\n    value: '',\r\n    key: 'timePickerField',\r\n    label: 'Time Picker Control',\r\n    inputType: 'text',\r\n    required: true,\r\n    setNowButton: true,\r\n    format: 24,\r\n  },\r\n  toggleField: {\r\n    value: '',\r\n    key: 'toggleField',\r\n    label: 'Toggle Control',\r\n    inputType: 'toggle',\r\n  },\r\n  radioField: {\r\n    value: '',\r\n    key: 'radioField',\r\n    label: 'Radio Control',\r\n    inputType: 'radio',\r\n  },\r\n  checkboxField: {\r\n    value: '',\r\n    key: 'checkboxField',\r\n    label: 'Checkbox Control',\r\n    inputType: 'checkbox',\r\n    requiredErrMsg: 'Checkbox Control is Required',\r\n  },\r\n  fileUploadField: {\r\n    value: '',\r\n    key: 'fileUploadField',\r\n    label: 'File Upload Control',\r\n    inputType: 'file',\r\n    requiredErrMsg: 'File Upload Control is Required',\r\n  },\r\n  datePickerField: {\r\n    value: '',\r\n    key: 'datePickerField',\r\n    label: 'Date Picker Control',\r\n    inputType: 'text',\r\n  },\r\n}"
                },
                {
                    "name": "multiChipSelect",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app-controls/configs/app-controls.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  {\r\n    label: 'Test 1',\r\n    value: 1,\r\n  },\r\n  {\r\n    label: 'Test 2',\r\n    value: 2,\r\n  },\r\n  {\r\n    label: 'Test 3',\r\n    value: 3,\r\n  },\r\n]"
                },
                {
                    "name": "radioOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app-controls/configs/app-controls.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  {\r\n    key: 'Radio 1',\r\n    value: 'Select Option 1',\r\n  },\r\n  {\r\n    key: 'Radio 2',\r\n    value: 'Select Option 2',\r\n  },\r\n  {\r\n    key: 'Radio 3',\r\n    value: 'Select Option 3',\r\n  },\r\n]"
                },
                {
                    "name": "selectOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app-controls/configs/app-controls.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  {\r\n    id: 1,\r\n    key: 'Select1',\r\n    value: 'Select Option 1',\r\n  },\r\n  {\r\n    id: 2,\r\n    key: 'Select2',\r\n    value: 'Select Option 2',\r\n  },\r\n  {\r\n    id: 3,\r\n    key: 'Select3',\r\n    value: 'Select Option 3',\r\n  },\r\n]"
                }
            ],
            "src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "src/app/shared/modules/form-control/components/date-picker/date-picker.component.ts": [
                {
                    "name": "DATE_FORMATS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/modules/form-control/components/date-picker/date-picker.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  parse: {\r\n    dateInput: 'DD-MM-YYYY',\r\n  },\r\n  display: {\r\n    dateInput: 'DD-MM-YYYY',\r\n    monthYearLabel: 'MMM YYYY',\r\n    dateA11yLabel: 'LL',\r\n    monthYearA11yLabel: 'MMMM YYYY',\r\n  },\r\n}"
                }
            ],
            "src/app/shared/common/interfaces/constants.static.ts": [
                {
                    "name": "defaultDateFormat",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/common/interfaces/constants.static.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'dd/MM/yyyy'"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false\r\n}"
                }
            ],
            "src/app/shared/modules/form-control/components/button/button.stories.ts": [
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/modules/form-control/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/modules/form-control/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/modules/form-control/components/button/button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<ButtonComponent>",
                    "defaultValue": "(args: ButtonComponent) => ({\r\n  props: args,\r\n})"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "loadChildren": "./core/auth/auth.module#AuthModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/core/auth/auth-routing.module.ts",
                                        "module": "AuthRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "LoginComponent"
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "AuthModule"
                            }
                        ]
                    },
                    {
                        "path": "admin",
                        "loadChildren": "./core/core.module#CoreModule",
                        "children": [
                            {
                                "kind": "module",
                                "children": [
                                    {
                                        "name": "routes",
                                        "filename": "src/app/core/core-routing.module.ts",
                                        "module": "CoreRoutingModule",
                                        "children": [
                                            {
                                                "path": "",
                                                "component": "CoreComponent",
                                                "children": [
                                                    {
                                                        "path": "app-control",
                                                        "loadChildren": "../app-controls/app-controls.module#AppControlsModule,"
                                                    }
                                                ]
                                            }
                                        ],
                                        "kind": "module"
                                    }
                                ],
                                "module": "CoreModule"
                            }
                        ]
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app-controls/component/app-controls.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppControlsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/app-controls/configs/app-controls.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appControls",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app-controls/configs/app-controls.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "multiChipSelect",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app-controls/configs/app-controls.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "radioOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app-controls/configs/app-controls.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/components/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/auth/services/login.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LoginService",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/side-bar-navigation/side-bar-navigation.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SideBarNavigationComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/components/sidebar/sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/core.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CoreComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/auth/auth.guard.ts",
                "type": "guard",
                "linktype": "guard",
                "name": "AuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/auth/auth-token.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "AuthTokenInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/error-handler/error-handler.interceptor.ts",
                "type": "interceptor",
                "linktype": "interceptor",
                "name": "ErrorHandlerInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/common/interfaces/constants.static.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "defaultDateFormat",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/common/interfaces/label-value.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ValueLabel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/form-control/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/form-control/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/form-control/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/form-control/components/button/button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/form-control/components/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/form-control/components/date-picker/date-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DatePickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/form-control/components/date-picker/date-picker.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DATE_FORMATS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/form-control/components/file-upload/file-upload.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FileUploadComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/form-control/components/multi-chip-select/multi-chip-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MultiChipSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/form-control/components/radio/radio.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RadioComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/form-control/components/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/form-control/components/stroked-button/stroked-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "StrokedButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/form-control/components/text-control-number/text-control-number.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextControlNumberComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/form-control/components/text-control/text-control.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TextControlComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/form-control/components/time-picker/time-picker.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TimePickerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/form-control/components/toggle/toggle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToggleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/form-control/directives/numbers-only.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NumbersOnlyDirective",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/form-control/interface/form-control.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FormControlModel",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/form-control/interface/radio-option.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RadioOption",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/form-control/interface/select-option.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectOption",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/form-control/interface/time-picker.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TimePickerModel",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/form-control/service/validator.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ValidatorService",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/tables/components/table-without-filter/table-without-filter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableWithoutFilterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/tables/components/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/tables/interfaces/table-data.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Column",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/tables/interfaces/table-data.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FilterColumns",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/tables/interfaces/table-data.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectionEvent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/modules/tables/interfaces/table-data.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "TableDataModel",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}